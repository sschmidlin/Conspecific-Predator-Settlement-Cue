x
}
pc=sapply(nc, func1)
# Generate a matrix with all possible combinations of positive and negative cue values
L = matrix(nrow = length(pc), ncol = length(nc))
r1 = 0.65
r2 = 0.35
t1 = 1
t2 = -1
# Run the model
for (i in 1:length(pc)) {
for (j in 1:length(nc)) {
L[i,j] = (1+pc[i]*r1*t1+nc[j]*r2*t2)/2
}
}
# Change the format of the result matrix for printing
df <- reshape2::melt(L)
# Print the model result
figureD = ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "darkblue", mid = "lightblue", high = "green", midpoint=0.5) +
labs(x = "Strength of negative cue", y = "Strength of positive cue", fill="Probability of settlement") +
scale_x_continuous(labels = function(x) x / 100) +
scale_y_continuous(labels = function(y) y / 100) +
coord_fixed() +
geom_contour(aes(z=value), colour = "white") +
ggtitle("Pos. cue ambiguously higher ranked: Weighted choice") +
theme_minimal() +
theme(legend.position="none")
figureD
#nc # Concentration of negative cue
#pc # Concentration of positive cue
library(ggplot2)
# Figure E: two positive cues
# Define a vector with all possible values of the positive cue (from 0 to 100)
pc = seq(from = 0, to = 1, by = 0.01)
# Define a function (linear, exponential, etc.) for the positive cue
func1 <- function(x) {
x
}
pc=sapply(pc, func1)
pc
# Define a vector with all possible values of the negative cue (from 0 to 100)
nc = seq(from = 0, to = 1, by = 0.01)
# Define a function (linear, exponential, etc.) for the positive cue
func1 <- function(x) {
x
}
pc=sapply(nc, func1)
# Generate a matrix with all possible combinations of positive and negative cue values
L = matrix(nrow = length(pc), ncol = length(nc))
r1 = 0.5
r2 = 0.5
t1 = 1
t2 = 1
# Run the model
for (i in 1:length(pc)) {
for (j in 1:length(nc)) {
L[i,j] = (1+pc[i]*r1*t1+nc[j]*r2*t2)/2
}
}
# Change the format of the result matrix for printing
df <- reshape2::melt(L)
# Print the model result
figureE = ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "darkblue", mid = "lightblue", high = "green", midpoint=0.5) +
labs(x = "Strength of second pos. cue", y = "Strength of first pos. cue", fill="Probability of settlement") +
scale_x_continuous(labels = function(x) x / 100) +
scale_y_continuous(labels = function(y) y / 100) +
coord_fixed() +
geom_contour(aes(z=value), colour = "white") +
ggtitle("Two additive positive cues: Weighted choice") +
theme_minimal() +
theme(legend.position="none")
figureE
matrix_size <- 101
data_matrix <- matrix(0, nrow = matrix_size, ncol = matrix_size)
gaussian_peak <- function(x, y, x_peak, y_peak, amplitude, std_dev) {
exp_val <- -((x - x_peak)^2 + (y - y_peak)^2) / (2 * std_dev^2)
amplitude * exp(exp_val)
}
peak_params <- data.frame(
x_peak = c(10, 55, 70, 75, 30),
y_peak = c(5, 65, 20, 35, 60),
amplitude = c(0.8, 0.6, 0.7, 0.5, 0.9),
std_dev = c(10, 8, 12, 15, 10)
)
for (x in 1:matrix_size) {
for (y in 1:matrix_size) {
for (i in 1:nrow(peak_params)) {
data_matrix[x, y] <- data_matrix[x, y] + gaussian_peak(x, y,
peak_params$x_peak[i],
peak_params$y_peak[i],
peak_params$amplitude[i],
peak_params$std_dev[i])
}
}
}
c1 <- (data_matrix - min(data_matrix)) / (max(data_matrix) - min(data_matrix))
matrix_size <- 101
data_matrix <- matrix(0, nrow = matrix_size, ncol = matrix_size)
gaussian_peak <- function(x, y, x_peak, y_peak, amplitude, std_dev) {
exp_val <- -((x - x_peak)^2 + (y - y_peak)^2) / (2 * std_dev^2)
amplitude * exp(exp_val)
}
peak_params <- data.frame(
x_peak = c(0, 25, 80, 60, 60),
y_peak = c(5, 15, 20, 95, 90),
amplitude = c(0.8, 0.6, 0.7, 0.5, 0.9),
std_dev = c(10, 8, 12, 15, 10)
)
for (x in 1:matrix_size) {
for (y in 1:matrix_size) {
for (i in 1:nrow(peak_params)) {
data_matrix[x, y] <- data_matrix[x, y] + gaussian_peak(x, y,
peak_params$x_peak[i],
peak_params$y_peak[i],
peak_params$amplitude[i],
peak_params$std_dev[i])
}
}
}
c2 <- (data_matrix - min(data_matrix)) / (max(data_matrix) - min(data_matrix))
matrix_size <- 101
data_matrix <- matrix(0, nrow = matrix_size, ncol = matrix_size)
gaussian_peak <- function(x, y, x_peak, y_peak, amplitude, std_dev) {
exp_val <- -((x - x_peak)^2 + (y - y_peak)^2) / (2 * std_dev^2)
amplitude * exp(exp_val)
}
peak_params <- data.frame(
x_peak = c(25, 45, 60, 80, 50),
y_peak = c(25, 75, 50, 40, 70),
amplitude = c(0.8, 0.6, 0.7, 0.5, 0.9),
std_dev = c(10, 8, 12, 15, 10)
)
for (x in 1:matrix_size) {
for (y in 1:matrix_size) {
for (i in 1:nrow(peak_params)) {
data_matrix[x, y] <- data_matrix[x, y] + gaussian_peak(x, y,
peak_params$x_peak[i],
peak_params$y_peak[i],
peak_params$amplitude[i],
peak_params$std_dev[i])
}
}
}
c3 <- (data_matrix - min(data_matrix)) / (max(data_matrix) - min(data_matrix))
#nc # Concentration of negative cue
#pc # Concentration of positive cue
library(ggplot2)
# Figure F: complex landscape
# Define a vector with all possible values of the positive cue (from 0 to 100)
pc = seq(from = 0, to = 1, by = 0.01)
# Define a function (linear, exponential, etc.) for the positive cue
func1 <- function(x) {
x
}
pc=sapply(pc, func1)
pc
# Define a vector with all possible values of the negative cue (from 0 to 100)
nc = seq(from = 0, to = 1, by = 0.01)
# Define a function (linear, exponential, etc.) for the positive cue
func1 <- function(x) {
x
}
pc=sapply(nc, func1)
# Generate a matrix with all possible combinations of positive and negative cue values
L = matrix(nrow = length(pc), ncol = length(nc))
c1 = 1-c1
c2 = 1-c2
r1 = 0.15
r2 = 0.35
r3 = 0.5
t1 = 1
t2 = -1
t3 = 1
# Run the model
for (i in 1:length(pc)) {
for (j in 1:length(nc)) {
L[i,j] = 1/2+(c1[i,j]*r1*t1+c2[i,j]*r2*t2+c3[i,j]*r3*t3)/3
}
}
# Change the format of the result matrix for printing
df <- reshape2::melt(L)
# Print the model result
figureF = ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "darkblue", mid = "lightblue", high = "green", midpoint=0.5) +
labs(x = "Spatial axis 1", y = "Spatial axis 2", fill="Probability of settlement") +
coord_fixed() +
geom_contour(aes(z=value), colour = "white") +
ggtitle("Landscape with pos. and neg. cues") +
theme_minimal() +
theme(legend.position="none")
figureF
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figureA)
pdf("Figure7.pdf", width = 18, height = 18)
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figureA)
pdf("Figure7.pdf", width = 18, height = 18)
grid.arrange(figureA, figureB, figureC, figureD, figureE, figureF, legend, ncol=3, nrow=3,
layout_matrix = rbind(c(1,2,3), c(4,5,6), c(7,7,7)),
widths = c(6, 6, 6), heights = c(6, 6, 6))
dev.off()
#nc # Concentration of negative cue
#pc # Concentration of positive cue
library(ggplot2)
# Figure A: additive model
# Define a vector with all possible values of the positive cue (from 0 to 100)
pc = seq(from = 0, to = 1, by = 0.01)
# Define a function (linear, exponential, etc.) for the positive cue
func1 <- function(x) {
x
}
pc=sapply(pc, func1)
pc
# Define a vector with all possible values of the negative cue (from 0 to 100)
nc = seq(from = 0, to = 1, by = 0.01)
# Define a function (linear, exponential, etc.) for the positive cue
func1 <- function(x) {
x
}
pc=sapply(nc, func1)
# Generate a matrix with all possible combinations of positive and negative cue values
L = matrix(nrow = length(pc), ncol = length(nc))
r1 = 0.5
r2 = 0.5
t1 = 1
t2 = -1
# Run the model
for (i in 1:length(pc)) {
for (j in 1:length(nc)) {
L[i,j] = (1+pc[i]*r1*t1+nc[j]*r2*t2)/2
}
}
# Change the format of the result matrix for printing
df <- reshape2::melt(L)
# Print the model result
figureA = ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "darkblue", mid = "lightblue", high = "green", midpoint=0.5) +
labs(x = "Strength of negative cue", y = "Strength of positive cue", fill="Probability of settlement") +
scale_x_continuous(labels = function(x) x / 100) +
scale_y_continuous(labels = function(y) y / 100) +
coord_fixed() +
geom_contour(aes(z=value), colour = "white") +
ggtitle("Equal ranking: Weighted choice") +
theme_minimal() +
theme(legend.position="none")
figureA
figure1 = ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "darkblue", mid = "lightblue", high = "green", midpoint=0.5) +
labs(x = "Strength of negative cue", y = "Strength of positive cue", fill="Probability of settlement") +
scale_x_continuous(labels = function(x) x / 100) +
scale_y_continuous(labels = function(y) y / 100) +
coord_fixed() +
geom_contour(aes(z=value), colour = "white") +
ggtitle("Equal ranking: Weighted choice") +
theme_minimal() +
theme(legend.position="top")
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 12, height = 12)
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 12, height = 12)
grid.arrange(figureA, figureB, figureC, figureD, figureE, figureF, legend, ncol=3, nrow=3,
layout_matrix = rbind(c(1,2,3), c(4,5,6), c(7,7,7)),
widths = c(4, 4, 4), heights = c(4, 4, 1))
dev.off()
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 15, height = 6.5)
grid.arrange(figureA, figureB, figureC, figureD, figureE, figureF, legend, ncol=3, nrow=3,
layout_matrix = rbind(c(1,2,3), c(4,5,6), c(7,7,7)),
widths = c(5, 5, 5), heights = c(3, 3, 0.5))
dev.off()
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 18, height = 6.5)
grid.arrange(figureA, figureB, figureC, figureD, figureE, figureF, legend, ncol=3, nrow=3,
layout_matrix = rbind(c(1,2,3), c(4,5,6), c(7,7,7)),
widths = c(6, 6, 6), heights = c(6, 6, 1))
dev.off()
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 18, height = 6.5)
grid.arrange(figureA, figureB, figureC, figureD, figureE, figureF, legend, ncol=3, nrow=3,
layout_matrix = rbind(c(1,2,3), c(4,5,6), c(7,7,7)),
widths = c(4, 4, 4), heights = c(6, 6, 1))
dev.off()
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 16, height = 13)
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend <- get_legend(figure1)
pdf("Figure7.pdf", width = 16, height = 13)
grid.arrange(figureA, figureB, figureC, figureD, figureE, figureF, legend, ncol=3, nrow=3,
layout_matrix = rbind(c(1,2,3), c(4,5,6), c(7,7,7)),
widths = c(4, 4, 4), heights = c(6, 6, 1))
dev.off()
# Install and load the required package
install.packages("ggplot2")
library(ggplot2)
# Sample data (replace this with your own time series data)
time <- seq(from = as.Date("2023-01-01"), by = "months", length.out = 10)
values <- c(10, 15, 12, 18, 20, 25, 22, 30, 28, 35)
data <- data.frame(time, values)
# Create the plot
ggplot(data, aes(x = time, y = values)) +
geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
labs(title = "Time Series Plot",
x = "Time",
y = "Values")
install.packages("ggplot2")
library(ggplot2)
# Sample data (replace this with your own time series data)
time <- seq(from = as.Date("2023-01-01"), by = "months", length.out = 10)
values <- c(10, 15, 12, 18, 20, 25, 22, 30, 28, 35)
data <- data.frame(time, values)
# Create the plot
ggplot(data, aes(x = time, y = values)) +
geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
labs(title = "Time Series Plot",
x = "Time",
y = "Values")
library(dplyr)
# Sample data (replace this with your own time series data)
time <- seq(from = as.Date("2023-01-01"), by = "months", length.out = 10)
values <- c(10, 15, 12, 18, 20, 25, 22, 30, 28, 35)
data <- data.frame(time, values)
# Create the plot
ggplot(data, aes(x = time, y = values)) +
geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
labs(title = "Time Series Plot",
x = "Time",
y = "Values")
ggplot(data, aes(x = time, y = values)) +
geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[1:4, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "red"              # Set the color of the line
)
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
geom_segment(
data = data[5:10, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "darkgreen"              # Set the color of the line
)
ggplot(data, aes(x = time, y = values)) +
#geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[1:4, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "red"              # Set the color of the line
)
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
geom_segment(
data = data[5:10, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "darkgreen"              # Set the color of the line
)
ggplot(data, aes(x = time, y = values)) +
#geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[1:4, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "red"              # Set the color of the line
)
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
geom_segment(
data = data[5:10, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "darkgreen"              # Set the color of the line
) +
labs(title = "Time Series Plot",
x = "Time",
y = "Values")
ggplot(data, aes(x = time, y = values)) +
#geom_line() +                 # Connect dots with lines
geom_point() +                # Add dots
geom_segment(
data = data[1:4, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "red"              # Set the color of the line
) +
geom_segment(
data = data[4:5, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
linetype = "dotted",        # Set the line type to dotted
color = "blue"              # Set the color of the line
) +
geom_segment(
data = data[5:10, ],         # Specify the segment data
aes(xend = lead(time),      # x-coordinate of the end of the segment
yend = lead(values)),   # y-coordinate of the end of the segment
color = "darkgreen"              # Set the color of the line
) +
labs(title = "Time Series Plot",
x = "Time",
y = "Values")
