model4 <- glmer(settled_30hrs ~ shell + conspecific_cue + predator_cue + shell:conspecific_cue + conspecific_cue:predator_cue + (1 | age) + (1 | Crab) + (1 | Tray_Number) + (1 | Well), data = data, family = binomial)
# 4. Does data fulfill model assumptions?
plot(model)
plot(model2)
plot(model3)
plot(model4)
# 5. Statistical test
summary(model)
summary(model2)
summary(model3)
summary(model4)
# 6. Visualize model predictions
# About ggeffects: https://strengejacke.github.io/ggeffects/articles/ggeffects.html
# Try this out: https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html
m2 <- ggpredict(model2, terms = c("conspecific_cue", "predator_cue"))
m3 <- ggpredict(model3, terms = c("shell", "conspecific_cue"))
# 6. Visualize model predictions
# About ggeffects: https://strengejacke.github.io/ggeffects/articles/ggeffects.html
# Try this out: https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html
m2 <- ggpredict(model2, terms = c("conspecific_cue", "predator_cue"))
plot(m2)
m3 <- ggpredict(model3, terms = c("shell", "conspecific_cue"))
m3 <- ggpredict(model3, terms = c("shell", "conspecific_cue"))
plot(m2)
setwd("C:\\Users\\Owner\\Desktop\\2nd experiment")
install.packages("lme4")
install.packages("ggeffects")
install.packages("stringr")
require(lme4)
require(ggeffects)
require(ggplot2)
library(dplyr)
install.packeges(lme4)
install.packages("lme4")
install.packages("lme4")
require(lmer4)
require("lmer4")
require("lme4")
install.packages(Matrix)
install.packages("Matrix")
install.packages("Matrix")
require("lme4")
require(lme4)
#loading data --> bdata (biofilm data)
#use if controls = steralised + conspecific cue
data <- read.csv2(file="biofilm excel.csv", check.names=FALSE, sep=",")
#use if controls = steralised + FSW
data <- read.csv2(file="biofilm_control excel.csv", check.name=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Date_started'] <- as.Date(data[, 'Date_started'], "%d/%m/%Y")
data[, 'Fertilisation_date'] <- as.Date(data[, 'Fertilisation_date'], "%d/%m/%Y")
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number_Well'
data[, 'Tray_Number_Well'] <- as.factor(data[, 'Tray_Number_Well'])
data[, 'Cue'] <- as.factor(data[, 'Cue'])
levels(data[,'Cue'])
# Calculate ages of larvae
data['age'] <- NA
for(i in 1:nrow(data)){
data[i, 'age'] <- difftime(data[i, 'Date_started'], data[i, 'Fertilisation_date'], units = "days")
}
i
#larvae settlement
#takes all values not considered NA and places them in a new data
data<- data[!is.na(data[,'Settled_30h']),]
#repeating a row for each larvae each time, settled/unsettled
mult_s1 <- rep(1:nrow(data), data[, 'Settled_10h'])
mult_u1 <- rep(1:nrow(data), data[, 'Unsettled_10h'])
mult_s2 <- rep(1:nrow(data), data[, 'Settled_20h'])
mult_u2 <- rep(1:nrow(data), data[, 'Unsettled_20h'])
mult_s3 <- rep(1:nrow(data), data[, 'Settled_30h'])
mult_u3 <- rep(1:nrow(data), data[, 'Unsettled_30h'])
#assigning each multi df into its own data df, will then cut out the other collumns and mash them together
data_s1 <- data[mult_s1, ]
data_s2 <- data[mult_s2, ]
data_s3 <- data[mult_s3, ]
data_u1 <- data[mult_u1, ]
data_u2 <- data[mult_u2, ]
data_u3 <- data[mult_u3, ]
#assigning the value 1 for each settled larve = for binary stats later
data_s1[, 'Settled_10h'] <- 1
data_s2[, "Settled_20h"] <- 1
data_s3[, "Settled_30h"] <- 1
data_u1[, 'Unsettled_10h'] <- 0
data_u2[, 'Unsettled_20h'] <- 0
data_u3[, 'Unsettled_30h'] <- 0
#taking away useless columns of data
data_s1 <- data_s1[, !(names(data_s1) %in% c("Unsettled_10h", "Settled_20h", "Unsettled_20h", "Settled_30h", "Unsettled_30h"))]
data_s2 <- data_s2[, !(names(data_s2) %in% c("Unsettled_10h", "Settled_10h", "Unsettled_20h", "Settled_30h", "Unsettled_30h"))]
data_s3 <- data_s3[, !(names(data_s3) %in% c("Unsettled_10h", "Settled_20h", "Unsettled_20h", "Settled_10h", "Unsettled_30h"))]
data_u1 <- data_u1[, !(names(data_u1) %in% c("Settled_10h", "Settled_20h", "Unsettled_20h", "Settled_30h", "Unsettled_30h"))]
data_u2 <- data_u2[, !(names(data_u2) %in% c("Unsettled_10h", "Settled_20h", "Settled_10h", "Settled_30h", "Unsettled_30h"))]
data_u3 <- data_u3[, !(names(data_u3) %in% c("Unsettled_10h", "Settled_20h", "Unsettled_20h", "Settled_30h", "Settled_10h"))]
#trying to find a way to bind all settled columns together in the same dataset
#testing if there are differences
identical(names(data_s1), names(data_s2))
#creating a new df to put them in
data_1 <- data
#need to change the names so they fit together, as they are binary we can have datasets for each timeframe 10, 20 30h
#is it needed to combine them togehter afterwards?
colnames(data_u1)[6] <- 'Settled_10h'
#trying to bind them
data_1 <- rbind(data_s1, data_u1 )
#do the same for time 20h 30h
data_2 <- data
data_3 <- data
colnames(data_u2)[6] <- 'Settled_20h'
colnames(data_u3)[6] <- 'Settled_30h'
data_2 <- rbind(data_s2, data_u2 )
data_3 <- rbind(data_s3, data_u3 )
table(data_3[,'Settled_30h']) # just to see how many larvae settled
data_3['shell'] <- data_3['Cue']
data_3['Conspecific'] <- data_3['Cue']
data_3['Predator'] <- data_3['Cue']
data_3$shell <- str_extract(data_3$Cue, "Biofilm")
data_3$shell[is.na(data_3$shell)] <- "Sterilized"
data_3$shell <- str_extract(data_3$Cue, "Biofilm")
setwd("C:\\Users\\Owner\\Desktop\\2nd experiment")
setwd('C:\Users\sarah.schmidlin\Documents\GitHub\Conspecific-Predator-Settlement-Cue')
setwd('C:\\Users\sarah.schmidlin\Documents\GitHub\Conspecific-Predator-Settlement-Cue')
install.packages("lme4")
install.packages("ggeffects")
install.packages("stringr")
install.packages("Matrix")
library(dplyr)
library(stringr)
library(dplyr)
require(lme4)
require('lme4')
require('ggplot2')
require('ggeffects')
require(ggeffects)
#loading data --> bdata (biofilm data)
#use if controls = steralised + conspecific cue
data <- read.csv2(file="biofilm excel.csv", check.names=FALSE, sep=",")
#use if controls = steralised + FSW
data <- read.csv2(file="biofilm_control excel.csv", check.name=FALSE, sep=",")
#use if controls = steralised + FSW
data <- read.csv2(file="biofilm_control excel.csv", check.name=FALSE, sep=",")
source("~/GitHub/Conspecific-Predator-Settlement-Cue/biofilm script.R")
#loading data --> bdata (biofilm data)
#use if controls = steralised + conspecific cue
data <- read.csv2(file="biofilm excel.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Date_started'] <- as.Date(data[, 'Date_started'], "%d/%m/%Y")
data[, 'Fertilisation_date'] <- as.Date(data[, 'Fertilisation_date'], "%d/%m/%Y")
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number_Well'
data[, 'Tray_Number_Well'] <- as.factor(data[, 'Tray_Number_Well'])
data[, 'Cue'] <- as.factor(data[, 'Cue'])
levels(data[,'Cue'])
# Calculate ages of larvae
data['age'] <- NA
for(i in 1:nrow(data)){
data[i, 'age'] <- difftime(data[i, 'Date_started'], data[i, 'Fertilisation_date'], units = "days")
}
i
#larvae settlement
#takes all values not considered NA and places them in a new data
data<- data[!is.na(data[,'Settled_30h']),]
#repeating a row for each larvae each time, settled/unsettled
mult_s1 <- rep(1:nrow(data), data[, 'Settled_10h'])
mult_u1 <- rep(1:nrow(data), data[, 'Unsettled_10h'])
mult_s2 <- rep(1:nrow(data), data[, 'Settled_20h'])
mult_u2 <- rep(1:nrow(data), data[, 'Unsettled_20h'])
mult_s3 <- rep(1:nrow(data), data[, 'Settled_30h'])
mult_u3 <- rep(1:nrow(data), data[, 'Unsettled_30h'])
#assigning each multi df into its own data df, will then cut out the other collumns and mash them together
data_s1 <- data[mult_s1, ]
data_s2 <- data[mult_s2, ]
data_s3 <- data[mult_s3, ]
data_u1 <- data[mult_u1, ]
data_u2 <- data[mult_u2, ]
data_u3 <- data[mult_u3, ]
#assigning the value 1 for each settled larve = for binary stats later
data_s1[, 'Settled_10h'] <- 1
data_s2[, "Settled_20h"] <- 1
data_s3[, "Settled_30h"] <- 1
data_u1[, 'Unsettled_10h'] <- 0
data_u2[, 'Unsettled_20h'] <- 0
data_u3[, 'Unsettled_30h'] <- 0
#taking away useless columns of data
data_s1 <- data_s1[, !(names(data_s1) %in% c("Unsettled_10h", "Settled_20h", "Unsettled_20h", "Settled_30h", "Unsettled_30h"))]
data_s2 <- data_s2[, !(names(data_s2) %in% c("Unsettled_10h", "Settled_10h", "Unsettled_20h", "Settled_30h", "Unsettled_30h"))]
data_s3 <- data_s3[, !(names(data_s3) %in% c("Unsettled_10h", "Settled_20h", "Unsettled_20h", "Settled_10h", "Unsettled_30h"))]
data_u1 <- data_u1[, !(names(data_u1) %in% c("Settled_10h", "Settled_20h", "Unsettled_20h", "Settled_30h", "Unsettled_30h"))]
data_u2 <- data_u2[, !(names(data_u2) %in% c("Unsettled_10h", "Settled_20h", "Settled_10h", "Settled_30h", "Unsettled_30h"))]
data_u3 <- data_u3[, !(names(data_u3) %in% c("Unsettled_10h", "Settled_20h", "Unsettled_20h", "Settled_30h", "Settled_10h"))]
#trying to find a way to bind all settled columns together in the same dataset
#testing if there are differences
identical(names(data_s1), names(data_s2))
#creating a new df to put them in
data_1 <- data
#need to change the names so they fit together, as they are binary we can have datasets for each timeframe 10, 20 30h
#is it needed to combine them togehter afterwards?
colnames(data_u1)[6] <- 'Settled_10h'
#trying to bind them
data_1 <- rbind(data_s1, data_u1 )
#do the same for time 20h 30h
data_2 <- data
data_3 <- data
colnames(data_u2)[6] <- 'Settled_20h'
colnames(data_u3)[6] <- 'Settled_30h'
data_2 <- rbind(data_s2, data_u2 )
data_3 <- rbind(data_s3, data_u3 )
table(data_3[,'Settled_30h']) # just to see how many larvae settled
data_3['shell'] <- data_3['Cue']
data_3['Conspecific'] <- data_3['Cue']
data_3['Predator'] <- data_3['Cue']
data_3$shell <- str_extract(data_3$Cue, "Biofilm")
data_3$shell[is.na(data_3$shell)] <- "Sterilized"
data_3$Conspecific <- str_extract(data_3$Cue, "Conspecific")
data_3$Conspecific <-sub("Conspecific", "present", data_3$Conspecific)
data_3$Conspecific[is.na(data_3$Conspecific)] <- "absent"
data_3$Predator <- str_extract(data_3$Predator, "Predator")
data_3$Predator <- sub("Predator", "present",data_3$Predator )
data_3$Predator[is.na(data_3$Predator)] <- "absent"
table(data_3[, c('shell', 'Conspecific', 'Predator')]) ######   we dont have any normal conspecific treatment (no predators no biofilm) so I dont know if its a problem.
#getting rid of extra clutter
rm(data_s1, data_s2, data_s3, data_u1, data_u2, data_u3)
# 3. Make a statistical model
model <- glmer(Settled_30h ~ shell * Conspecific * Predator + (1 | age) + (1 | Tray_Number_Well), data = data_3, family = binomial)
plot(model)
# MODEL 2   keep only biofilm cues
m_data1 <- data_3[data_3[, 'shell'] %in% 'Biofilm', ]
#make a table with 2 cues
table(m_data1[, c('Conspecific', 'Predator')])
model2 <- glmer(Settled_30h ~ Conspecific * Predator + (1 | age) +(1 | Tray_Number_Well), data = data_3, family = binomial)
plot(model2)
summary(model2)
m2 <- ggpredict(model2, terms = c("Conspecific", "Predator"))
plot(m2)
# MODEL 3
# Repeat analysis once more without steralised cues
m_data2 <- data_3[data_3[, 'Conspecific'] %in% 'absent', ]
table(m_data2[, c('Predator', 'shell')])
model3 <- glmer(Settled_30h ~ Predator * shell + (1 | age) + (1 | Tray_Number_Well), data = data_3, family = binomial)
plot(model3)
summary(model3)
m3 <- ggpredict(model3, terms = c("Predator", "shell"))
plot(m3)
# Model with all data, but dropping unbalanced factor combinations
model4 <- glmer(Settled_30h ~ shell + Conspecific + Predator + shell:Conspecific + Conspecific:Predator + (1 | age) + (1 | Tray_Number_Well), data = data_3, family = binomial)
summary(model4)
plot(model4)
m4 <- ggpredict(model4, terms = c("shell","Predator" , "Conspecific"))
plot(m4)
View(data)
View(data_3)
View(data_3)
View(data_3)
View(data_3)
View(cohens)
install.packages("lme4")
install.packages("ggeffects")
install.packages("stringr")
install.packages('Matrix')
require(lme4)
require('lme4')
require(ggeffects)
install.packages("ggeffects")
install.packages("ggeffects")
require(ggeffects)
require(ggeffects)
require('ggeffects')
require(ggplot2)
#loading data --> bdata (biofilm data)
#use if controls = steralised + conspecific cue
data <- read.csv2(file="biofilm excel.csv", check.names=FALSE, sep=",")
# Load libraries
require(lme4)
require(ggeffects)
require(DHARMa)
# Load libraries
require(lme4)
require(ggeffects)
require(DHARMa)
install.packages(DHARMAa)
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number'
data[, 'Tray_Number'] <- as.factor(data[, 'Tray_Number'])
data[, 'Cue'] <- as.factor(data[, 'Cue'])
levels(data[,'Cue'])
# Calculate ages of larvae
data['age'] <- NA
for(i in 1:nrow(data)){
data[i, 'age'] <- difftime(data[i, 'Start_date'], data[i, 'Fertilization_date'], units = "days")
}
# 1. Calculate response variable from input data
# Quick fix for the moment: concentrate on data after 30 hours
# Multiply rows by number of larvae per well for settled and unattached and concatenate the resulting dataframes
mult_s <- rep(1:nrow(data), data[, 'settled_30hrs'])
mult_u <- rep(1:nrow(data), data[, 'unattached_30hrs'])
data_s <- data[mult_s,]
data_s[, 'settled_30hrs'] <- 1
data_s <- data_s[, !(names(data_s) %in% c('settled_10hrs', 'unattached_10hrs', 'settled_20hrs', 'unattached_20hrs', 'unattached_30hrs'))]
data_u <- data[mult_u,]
data_u[, 'unattached_30hrs'] <- 0
data_u <- data_u[, !(names(data_u) %in% c('settled_10hrs', 'unattached_10hrs', 'settled_20hrs', 'unattached_20hrs', 'settled_30hrs'))]
colnames(data_u)[7] <- 'settled_30hrs'
data <- rbind(data_s, data_u)
table(data[,'settled_30hrs']) # just to see how many larvae settled
# 2. Make new binary predictor variables from multilevel factor
# shell: sterilized vs. untreated
# conspecific cue: present vs. absent
# predator cue: present vs. absent
data['shell'] <- data['Cue']
levels(data$shell) <- c(rep('untreated', 3), rep('sterilized', 4))
data['conspecific_cue'] <- data['Cue']
levels(data$conspecific_cue) <- c('absent', 'present', rep('absent', 2), rep('present', 2), 'absent')
data['predator_cue'] <- data['Cue']
levels(data$predator_cue) <- c(rep('absent', 2), 'present', rep('absent', 2), rep('present', 2))
# 3. Make a statistical model
model <- glmer(settled_30hrs ~ shell * conspecific_cue * predator_cue + (1 | age) + (1 | Crab) + (1 | Tray_Number) + (1 | Well), data = data, family = binomial)
# Experiment was unbalanced, lacking data for untreated shells with predator cues present -> repeat analysis with only sterilized shells
data2 <- data[data[, 'shell'] %in% 'sterilized', ]
table(data2[, c('conspecific_cue', 'predator_cue')])
model2 <- glmer(settled_30hrs ~ conspecific_cue * predator_cue + (1 | age) + (1 | Crab) + (1 | Tray_Number) + (1 | Well), data = data, family = binomial)
# Testing model assumptions
testDispersion(model2)
simulationOutput <- simulateResiduals(fittedModel = model2, plot = F)
plot(simulationOutput)
# Test model
summary(model2)
# Checking for a batch effect
table(data2[, c('conspecific_cue', 'predator_cue')])
model2 <- glmer(settled_30hrs ~ conspecific_cue * predator_cue + (1 | age) + (1 | Crab) + (1 | Tray_Number) + (1 | Well), data = data, family = binomial)
# Testing model assumptions
testDispersion(model2)
simulationOutput <- simulateResiduals(fittedModel = model2, plot = F)
plot(simulationOutput)
# 3. Make a statistical model
model <- glmer(settled_30hrs ~ shell * conspecific_cue * predator_cue + (1 | age) + (1 | Crab) + (1 | Tray_Number) + (1 | Well), data = data, family = binomial)
# Visualize model predictions
m2 <- ggpredict(model2, terms = c("conspecific_cue", "predator_cue", "Larvae_"))
plot(m2)
require(DHARMa)
#load data from second trial
data.2 <- read.csv2(file="Settelment cues experiment 1 NewData.csv", check.names=FALSE, sep=",")
data.2[, 'Tray_well'] <- as.factor(data.2[, 'Tray_well'])
data.2[, 'Cue']  <- as.factor(data.2[, 'Cue'])
# 1a. Calculate response variable from input data
# data after 30 hours
# Multiply rows by number of larvae per well for settled and unattached and concatenate the resulting dataframes
mult_s30.2 <- rep(1:nrow(data.2), data.2[, 'settled_30hr'])
mult_u30.2 <- rep(1:nrow(data.2), data.2[, 'unattached_30hr'])
data_s30.2 <- data.2[mult_s30.2,]
data_s30.2[, 'settled_30hr'] <- 1
data_s30.2 <- data_s30.2[, !(names(data_s30.2) %in% c('settled_10hr', 'unattached_10hr', 'settled_20hr', 'unattached_20hr', 'unattached_30hr'))]
data_u30.2 <- data.2[mult_u30.2,]
data_u30.2[, 'unattached_30hr'] <- 0
data_u30.2 <- data_u30.2[, !(names(data_u30.2) %in% c('settled_10hr', 'unattached_10hr', 'settled_20hr', 'unattached_20hr', 'settled_30hr'))]
colnames(data_u30.2)[6] <- 'settled_30hr'
data30.2 <- rbind(data_s30.2, data_u30.2)
table(data30.2[,'settled_30hr']) # just to see how many larvae settled
# 2a. Make new binary predictor variables from multilevel factor
# shell: sterilized vs. untreated
# conspecific cue: present vs. absent
# predator cue: present vs. absent
data30.2['shell'] <- data30.2['Cue']
data30.2['predator_cue'] <- data30.2['Cue']
data30.2['conspecific_cue'] <- data30.2['Cue']
data30.2$predator_cue <- as.factor(data30.2$predator_cue)
data30.2$conspecific_cue <- as.factor(data30.2$conspecific_cue)
levels(data30.2$shell) <- c(rep('untreated', 3), rep('sterilized', 4))
levels(data30.2$conspecific_cue) <- c('absent', 'present', rep('absent', 2), rep('present', 2), 'absent')
levels(data30.2$predator_cue) <- c(rep('absent', 2), 'present', rep('absent', 2), rep('present', 2))
table(data30.2[, c('shell', 'conspecific_cue', 'predator_cue')]) # check if experiment was balanced ### unsure about this table
# 3a. Make a statistical model
model30.2 <- glmer(settled_30hr ~ shell * conspecific_cue * predator_cue + (1 | Age) + (1 | Tray_well) + (1 | Larvae_batch), data = data30.2, family = binomial)
table(data30.2[, c('conspecific_cue', 'predator_cue', 'shell')])
# repeating analysis with only sterilized shells
data30.22 <- data30.2[data30.2[, 'shell'] %in% 'sterilized', ]
table(data30.22[, c('conspecific_cue', 'predator_cue')])
model2.30.2 <- glmer(settled_30hr ~ conspecific_cue * predator_cue + (1 | Age) + (1 | Tray_well) + (1 | Larvae_batch), data = data30.2, family = binomial)
# Testing model assumptions
testDispersion(model2.30.2)
data30.22 <- data30.2[data30.2[, 'shell'] %in% 'sterilized', ]
table(data30.22[, c('conspecific_cue', 'predator_cue', 'Larvae_batch')])
model2.30.2 <- glmer(settled_30hr ~ conspecific_cue * predator_cue * Larvae_batch + (1 | Age) + (1 | Tray_well), data = data30.2, family = binomial)
# Visualize model predictions
m2.30.2 <- ggpredict(model2.30.2, terms = c("conspecific_cue", "predator_cue", "Larvae_batch"))
plot(m2.30.2)
require(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
require(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages('lme4')
install.packages('Matrix')
install.packages('ggeffects')
require('lme4')
require(lme4)
require(ggeffects)
require('ggeffects')
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Convert dates from chr to Date-format
typeof(data[, 'Start_date'])
typeof(data, 'Fertilization_date')
View(data)
View(data)
typeof(data, "Fertilization_date")
typeof(data[, 'Fertilization_date'])
data[, 'Fertilization_date'] <- as.double(data[,'Fertilization_date'])
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Set working directory where both the R script and the data are stored.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number'
data[, 'Tray_Number'] <- as.factor(data[, 'Tray_Number'])
data[, 'Cue'] <- as.factor(data[, 'Cue'])
levels(data[,'Cue'])
# 1. Calculate response variable from input data
# Quick fix for the moment: concentrate on data after 30 hours
# Multiply rows by number of larvae per well for settled and unattached and concatenate the resulting dataframes
mult_s <- rep(1:nrow(data), data[, 'settled_30hrs'])
mult_u <- rep(1:nrow(data), data[, 'unattached_30hrs'])
data_s <- data[mult_s,]
data_s[, 'settled_30hrs'] <- 1
data_s <- data_s[, !(names(data_s) %in% c('settled_10hrs', 'unattached_10hrs', 'settled_20hrs', 'unattached_20hrs', 'unattached_30hrs'))]
data_u <- data[mult_u,]
data_u[, 'unattached_30hrs'] <- 0
data_u <- data_u[, !(names(data_u) %in% c('settled_10hrs', 'unattached_10hrs', 'settled_20hrs', 'unattached_20hrs', 'settled_30hrs'))]
colnames(data_u)[7] <- 'settled_30hrs'
View(data)
View(data)
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
View(data)
View(data)
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number'
data[, 'Tray_Number'] <- as.factor(data[, 'Tray_Number'])
data[, 'Cue'] <- as.factor(data[, 'Cue'])
levels(data[,'Cue'])
# 1. Calculate response variable from input data
# Quick fix for the moment: concentrate on data after 30 hours
# Multiply rows by number of larvae per well for settled and unattached and concatenate the resulting dataframes
mult_s <- rep(1:nrow(data), data[, 'settled_30hrs'])
mult_u <- rep(1:nrow(data), data[, 'unattached_30hrs'])
data_s <- data[mult_s,]
data_s[, 'settled_30hrs'] <- 1
data_s <- data_s[, !(names(data_s) %in% c('settled_10hrs', 'unattached_10hrs', 'settled_20hrs', 'unattached_20hrs', 'unattached_30hrs'))]
data_u <- data[mult_u,]
data_u[, 'unattached_30hrs'] <- 0
data_u <- data_u[, !(names(data_u) %in% c('settled_10hrs', 'unattached_10hrs', 'settled_20hrs', 'unattached_20hrs', 'settled_30hrs'))]
colnames(data_u)[7] <- 'settled_30hrs'
data <- rbind(data_s, data_u)
View(data)
View(data)
View(data_s)
View(data_s)
View(data_u)
View(data_u)
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
# Convert dates from chr to Date-format
data[, 'Start_date'] <- as.Date(data[, 'Start_date'])
data[, 'Fertilization_date'] <- as.Date(data[, 'Fertilization_date'])
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number'
data[, 'Tray_Number'] <- as.factor(data[, 'Tray_Number'])
data[, 'Cue'] <- as.factor(data[, 'Cue'])
levels(data[,'Cue'])
# Load the data
data <- read.csv2(file="Settlement_cue_data1-All_data.csv", check.names=FALSE, sep=",")
View(data)
View(data)
# Convert Cue and Tray Number to factor
colnames(data)[4] <- 'Tray_Number'
